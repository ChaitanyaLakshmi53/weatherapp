<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather App</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background: linear-gradient(to right, #00c6ff, #0072ff); /* Gradient from light blue to dark blue */
        }

        .container {
            background-color: #ffffff;
            padding: 40px;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            text-align: center;
            width: 100%;
            max-width: 400px;
        }

        h1 {
            font-size: 2rem;
            margin-bottom: 20px;
        }

        .input-container {
            margin-bottom: 20px;
        }

        input[type="text"] {
            padding: 10px;
            width: 75%;
            margin-right: 10px;
            border-radius: 4px;
            border: 1px solid #ccc;
            font-size: 1rem;
        }

        button {
            padding: 10px 20px;
            background-color: #4caf50;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
        }

        button:hover {
            background-color: #45a049;
        }

        .weather-info {
            margin-top: 20px;
            font-size: 1.2rem;
            color: #333;
        }

        .weather-info h2 {
            font-size: 1.8rem;
            margin-bottom: 10px;
        }

        .weather-info p {
            margin: 8px 0;
        }

        .weather-info img {
            width: 100px;
        }

        .loading {
            font-size: 1.2rem;
            color: #333;
            margin-top: 20px;
        }

        .error {
            color: red;
            font-size: 1.2rem;
        }

        @media (max-width: 600px) {
            .container {
                padding: 20px;
            }

            h1 {
                font-size: 1.5rem;
            }

            input[type="text"], button {
                width: 100%;
                margin-bottom: 10px;
            }
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Weather App</h1>
        <div class="input-container">
            <input type="text" id="city" placeholder="Enter city name">
            <button onclick="getWeather()">Get Weather</button>
        </div>
        <div id="weather-info" class="weather-info"></div>
        <div id="loading" class="loading" style="display: none;">Loading...</div>
        <div id="error-message" class="error"></div>
    </div>

    <script>
        const apiKey = 'YOUR_API_KEY'; // Replace with your OpenWeatherMap API key

        // Function to get weather data
        async function getWeather() {
            const city = document.getElementById('city').value;
            const weatherInfoDiv = document.getElementById('weather-info');
            const loadingDiv = document.getElementById('loading');
            const errorDiv = document.getElementById('error-message');
            
            weatherInfoDiv.innerHTML = '';
            loadingDiv.style.display = 'block';
            errorDiv.innerHTML = '';
            
            // Hide the weather info when loading starts
            weatherInfoDiv.style.display = 'none';

            // Check if the user has input a city
            if (!city) {
                // If no city, use geolocation to get weather for the user's current location
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(getWeatherByGeoLocation, showError);
                } else {
                    errorDiv.innerHTML = "Geolocation is not supported by this browser.";
                    loadingDiv.style.display = 'none';
                }
                return;
            }

            try {
                const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`);
                if (!response.ok) {
                    throw new Error('City not found');
                }

                const data = await response.json();
                showWeather(data);
                loadingDiv.style.display = 'none';
            } catch (error) {
                errorDiv.innerHTML = `Error: ${error.message}`;
                loadingDiv.style.display = 'none';
            }
        }

        // Function to get weather by geolocation
        function getWeatherByGeoLocation(position) {
            const lat = position.coords.latitude;
            const lon = position.coords.longitude;

            fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`)
                .then(response => response.json())
                .then(data => {
                    showWeather(data);
                })
                .catch(error => {
                    document.getElementById('error-message').innerHTML = `Error: ${error.message}`;
                });
        }

        // Function to show weather data
        function showWeather(data) {
            const weatherInfoDiv = document.getElementById('weather-info');
            weatherInfoDiv.style.display = 'block';

            const iconUrl = `https://openweathermap.org/img/wn/${data.weather[0].icon}.png`;

            weatherInfoDiv.innerHTML = `
                <h2>Weather in ${data.name}, ${data.sys.country}</h2>
                <img src="${iconUrl}" alt="${data.weather[0].description}">
                <p><strong>Temperature:</strong> ${data.main.temp}Â°C</p>
                <p><strong>Weather:</strong> ${data.weather[0].description}</p>
                <p><strong>Humidity:</strong> ${data.main.humidity}%</p>
                <p><strong>Wind Speed:</strong> ${data.wind.speed} m/s</p>
            `;
        }

        // Function to handle errors during geolocation
        function showError(error) {
            const errorDiv = document.getElementById('error-message');
            errorDiv.innerHTML = `Error: ${error.message}`;
        }
    </script>

</body>
</html>
